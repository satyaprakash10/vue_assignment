{"ast":null,"code":"import _objectSpread from \"/Users/shivamvarma/Project/web/vue_assignment/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport { validationMixin } from 'vuelidate';\nimport { required, email } from 'vuelidate/lib/validators';\nimport { mapActions, mapGetters } from 'vuex';\nimport { SaveIcon, HomeIcon, UsersIcon, ChevronRightIcon, UserIcon } from '@vue-hero-icons/solid';\nexport default {\n  mixins: [validationMixin],\n  components: {\n    HomeIcon: HomeIcon,\n    SaveIcon: SaveIcon,\n    ChevronRightIcon: ChevronRightIcon,\n    UsersIcon: UsersIcon,\n    UserIcon: UserIcon\n  },\n  data: function data() {\n    return {\n      previewImage: '',\n      formData: {\n        id: null,\n        image: '',\n        name: '',\n        email: '',\n        mobile: '',\n        coordinates: '',\n        address: ''\n      }\n    };\n  },\n  validations: {\n    formData: {\n      name: {\n        required: required\n      },\n      email: {\n        required: required,\n        email: email\n      },\n      mobile: {\n        required: required\n      }\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(['getSelectedUser'])), {}, {\n    nameErrors: function nameErrors() {\n      var errors = [];\n      if (!this.$v.formData.name.$dirty) return errors;\n      !this.$v.formData.name.required && errors.push('Name is required.');\n      return errors;\n    },\n    emailErrors: function emailErrors() {\n      var errors = [];\n      if (!this.$v.formData.email.$dirty) return errors;\n      !this.$v.formData.email.email && errors.push('Must be valid e-mail');\n      !this.$v.formData.email.required && errors.push('E-mail is required');\n      return errors;\n    },\n    mobileErrors: function mobileErrors() {\n      var errors = [];\n      if (!this.$v.formData.mobile.$dirty) return errors;\n      !this.$v.formData.mobile.required && errors.push('Mobile is required');\n      return errors;\n    }\n  }),\n  mounted: function mounted() {\n    this.initAddress();\n\n    if (this.$route.params.id) {\n      this.getUserData();\n    }\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(['addUser', 'updateUser'])), {}, {\n    getUserData: function getUserData() {\n      var _this = this;\n\n      axios.get(\"http://localhost:3000/users/\".concat(this.$route.params.id)).then(function (response) {\n        if (response) {\n          _this.previewImage = response.data.image;\n          _this.formData.image = response.data.image;\n          _this.formData.name = response.data.name;\n          _this.formData.email = response.data.email;\n          _this.formData.mobile = response.data.mobile;\n          _this.formData.address = response.data.address;\n          _this.formData.coordinates = response.data.coordinates;\n        }\n      });\n    },\n    uploadImage: function uploadImage(event) {\n      var _this2 = this;\n\n      var input = event.target;\n\n      if (input.files) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          _this2.previewImage = e.target.result;\n          _this2.formData.image = e.target.result;\n        };\n\n        reader.readAsDataURL(input.files[0]);\n      }\n    },\n    removeImage: function removeImage() {\n      this.previewImage = '';\n      this.formData.image = '';\n    },\n    initAddress: function initAddress() {\n      var _this3 = this;\n\n      mapboxgl.accessToken = 'pk.eyJ1IjoiaGFzaWkiLCJhIjoiY2wwYWt4cjJ1MDF4YTNjbWptNzZwM2ZhZyJ9.9WUVDkgiL5lsqX95u0VAvA';\n      var geocoder = new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        types: 'country,region,place,postcode,locality,neighborhood'\n      });\n      geocoder.addTo('#geocoder'); // Get the geocoder results container.\n\n      var results = document.getElementById('result'); // Add geocoder result to container.\n\n      geocoder.on('result', function (e) {\n        results.innerText = JSON.stringify(e.result, null, 2);\n        _this3.formData.coordinates = e.result.geometry.coordinates;\n        _this3.formData.address = e.result.place_name;\n      }); // Clear results container when search is cleared.\n\n      geocoder.on('clear', function () {\n        results.innerText = '';\n      });\n    },\n    submitUserData: function submitUserData() {\n      var _this4 = this;\n\n      this.$v.$touch();\n\n      if (this.$route.params.id) {\n        this.updateUser({\n          id: this.$route.params.id,\n          data: this.formData\n        }).then(function () {\n          _this4.$toastr.s('User updated successfully');\n\n          _this4.$router.push('/');\n        });\n      } else {\n        this.addUser(this.formData).then(function () {\n          _this4.$toastr.s('User added successfully');\n\n          _this4.$router.push('/');\n        });\n      }\n    }\n  })\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;AACA;AACA,SACAA,QADA,EAEAC,QAFA,EAGAC,SAHA,EAIAC,gBAJA,EAKAC,QALA,QAMA,uBANA;AAOA;AACAC,2BADA;AAGAC;AACAL,sBADA;AAEAD,sBAFA;AAGAG,sCAHA;AAIAD,wBAJA;AAKAE;AALA,GAHA;AAWAG,MAXA,kBAWA;AACA;AACAC,sBADA;AAEAC;AACAC,gBADA;AAEAC,iBAFA;AAGAC,gBAHA;AAIAC,iBAJA;AAKAC,kBALA;AAMAC,uBANA;AAOAC;AAPA;AAFA;AAYA,GAxBA;AA0BAC;AACAR;AACAG;AAAAM;AAAA,OADA;AAEAL;AAAAK;AAAAL;AAAA,OAFA;AAGAC;AAAAI;AAAA;AAHA;AADA,GA1BA;AAkCAC,4CACAC,+BADA;AAEAC,cAFA,wBAEA;AACA;AACA;AACA;AACA;AACA,KAPA;AAQAC,eARA,yBAQA;AACA;AACA;AACA;AACA;AACA;AACA,KAdA;AAeAC,gBAfA,0BAeA;AACA;AACA;AACA;AACA;AACA;AApBA,IAlCA;AAyDAC,SAzDA,qBAyDA;AACA;;AACA;AACA;AACA;AACA,GA9DA;AAgEAC,2CACAC,qCADA;AAGAC,eAHA,yBAGA;AAAA;;AACAC,YACAC,GADA,uCACA,qBADA,GAEAC,IAFA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAZA;AAaA,KAjBA;AAmBAC,eAnBA,uBAmBAC,KAnBA,EAmBA;AAAA;;AACA;;AACA;AACA;;AACAC;AACA;AACA;AACA,SAHA;;AAIAA;AACA;AACA,KA7BA;AA+BAC,eA/BA,yBA+BA;AACA;AACA;AACA,KAlCA;AAoCAC,eApCA,yBAoCA;AAAA;;AACAC,6BACA,wFADA;AAGA;AACAC,yCADA;AAEAC;AAFA;AAKAC,kCATA,CAWA;;AACA,sDAZA,CAcA;;AACAA;AACAC;AACA;AACA;AACA,OAJA,EAfA,CAqBA;;AACAD;AACAC;AACA,OAFA;AAGA,KA7DA;AA+DAC,kBA/DA,4BA+DA;AAAA;;AACA;;AACA;AACA;AACA/B,mCADA;AAEAH;AAFA,WAGAuB,IAHA,CAGA;AACA;;AACA;AACA,SANA;AAOA,OARA,MAQA;AACA;AACA;;AACA;AACA,SAHA;AAIA;AACA;AA/EA;AAhEA","names":["SaveIcon","HomeIcon","UsersIcon","ChevronRightIcon","UserIcon","mixins","components","data","previewImage","formData","id","image","name","email","mobile","coordinates","address","validations","required","computed","mapGetters","nameErrors","emailErrors","mobileErrors","mounted","methods","mapActions","getUserData","axios","get","then","uploadImage","event","reader","removeImage","initAddress","mapboxgl","accessToken","types","geocoder","results","submitUserData"],"sourceRoot":"src/views/users","sources":["Create.vue"],"sourcesContent":["<template>\n  <div class=\"mb-10\">\n    <!-- User breadcrumb  section -->\n    <div class=\"pl-3\">\n      <div\n        class=\"w-full max-w-5xl px-4 py-3 mt-10 bg-white border-t-4 border-green-500 rounded-md shadow-lg\"\n      >\n        <nav class=\"\" aria-label=\"Breadcrumb\">\n          <div class=\"flex items-center justify-between\">\n            <div>\n              <h1 class=\"font-sans text-xl font-bold sm:text-2xl\">\n                {{ $route.params.id ? 'Edit User' : 'New User' }}\n              </h1>\n            </div>\n          </div>\n\n          <nav class=\"flex mt-6 mb-2\" aria-label=\"Breadcrumb\">\n            <ol role=\"list\" class=\"flex items-center space-x-4\">\n              <li>\n                <div>\n                  <router-link to=\"/\" class=\"text-gray-400 hover:text-gray-500\">\n                    <HomeIcon\n                      class=\"flex-shrink-0 w-5 h-5\"\n                      aria-hidden=\"true\"\n                    />\n                    <span class=\"sr-only\">Home</span>\n                  </router-link>\n                </div>\n              </li>\n              <li>\n                <div class=\"flex items-center\">\n                  <ChevronRightIcon\n                    class=\"flex-shrink-0 w-5 h-5 text-gray-400\"\n                    aria-hidden=\"true\"\n                  />\n                  <router-link\n                    to=\"/\"\n                    class=\"flex items-center ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\"\n                  >\n                    <UsersIcon\n                      class=\"flex-shrink-0 w-5 h-5 mr-3\"\n                      aria-hidden=\"true\"\n                    />\n                    Users\n                  </router-link>\n                </div>\n              </li>\n              <li>\n                <div class=\"flex items-center\">\n                  <ChevronRightIcon\n                    class=\"flex-shrink-0 w-5 h-5 text-gray-500\"\n                    aria-hidden=\"true\"\n                  />\n                  <router-link\n                    to=\"#\"\n                    class=\"flex items-center ml-4 text-sm font-medium text-green-500 hover:text-green-600\"\n                  >\n                    <UserIcon\n                      class=\"flex-shrink-0 w-5 h-5 mr-3\"\n                      aria-hidden=\"true\"\n                    />\n                    {{ $route.params.id ? 'Edit User' : 'New User' }}\n                  </router-link>\n                </div>\n              </li>\n            </ol>\n          </nav>\n        </nav>\n      </div>\n    </div>\n\n    <hr class=\"w-full mx-auto mt-10 border-green-300 max-w-7xl\" />\n\n    <div class=\"w-full mt-10\">\n      <div\n        class=\"px-4 py-5 mx-4 bg-white border-t-4 border-green-500 rounded-md shadow-lg\"\n        max-width=\"1450\"\n      >\n        <form action=\"\" @submit.prevent=\"submitUserData\">\n          <div\n            class=\"flex justify-center w-64 px-6 pt-5 pb-6 mt-2 border-2 border-gray-300 border-dashed rounded-md mb-7\"\n          >\n            <div class=\"space-y-1 text-center\">\n              <svg\n                v-if=\"!previewImage\"\n                class=\"w-12 h-12 mx-auto text-gray-400\"\n                stroke=\"currentColor\"\n                fill=\"none\"\n                viewBox=\"0 0 48 48\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n                  stroke-width=\"2\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                />\n              </svg>\n              <div class=\"flex text-sm text-gray-600\">\n                <label\n                  for=\"file-upload\"\n                  class=\"relative font-medium text-indigo-600 bg-white rounded-md cursor-pointer hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500\"\n                >\n                  <span v-if=\"!previewImage\">Upload a file</span>\n                  <input\n                    id=\"file-upload\"\n                    name=\"image\"\n                    type=\"file\"\n                    class=\"sr-only\"\n                    @change=\"uploadImage\"\n                  />\n                  <img\n                    v-if=\"previewImage\"\n                    :src=\"previewImage\"\n                    alt=\"\"\n                    class=\"w-20 h-20\"\n                  />\n                  <span v-if=\"previewImage\" @click=\"removeImage\">remove</span>\n                </label>\n                <p v-if=\"!previewImage\" class=\"pl-1\">or drag and drop</p>\n              </div>\n              <p v-if=\"!previewImage\" class=\"text-xs text-gray-500\">\n                PNG, JPG, GIF up to 10MB\n              </p>\n            </div>\n          </div>\n          <v-text-field\n            v-model=\"formData.name\"\n            :counter=\"10\"\n            :error-messages=\"errors\"\n            label=\"Name\"\n            required\n            @input=\"$v.formData.name.$touch()\"\n            @blur=\"$v.formData.name.$touch()\"\n          ></v-text-field>\n\n          <v-text-field\n            v-model=\"formData.email\"\n            :error-messages=\"emailErrors\"\n            label=\"E-mail\"\n            required\n            @input=\"$v.formData.email.$touch()\"\n            @blur=\"$v.formData.email.$touch()\"\n          ></v-text-field>\n\n          <v-text-field\n            v-model=\"formData.mobile\"\n            :error-messages=\"mobileErrors\"\n            label=\"Mobile\"\n            required\n            @input=\"$v.formData.email.$touch()\"\n            @blur=\"$v.formData.email.$touch()\"\n          ></v-text-field>\n\n          <div id=\"geocoder\" class=\"mb-8\"></div>\n          <pre id=\"result\" ref=\"result\" class=\"hidden\"></pre>\n\n          <button\n            type=\"submit\"\n            class=\"inline-flex items-center px-4 py-3 text-sm font-semibold leading-4 text-white transition-all duration-500 ease-linear bg-green-500 border border-transparent rounded-md shadow-sm group hover:shadow-lg hover:bg-opacity-60 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            <SaveIcon\n              class=\"w-6 h-6 mr-3 text-white group-hover:text-green-600\"\n            />\n            {{ $route.params.id ? 'Update User' : 'Save User' }}\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from 'axios'\nimport { validationMixin } from 'vuelidate'\nimport { required, email } from 'vuelidate/lib/validators'\nimport { mapActions, mapGetters } from 'vuex'\nimport {\n  SaveIcon,\n  HomeIcon,\n  UsersIcon,\n  ChevronRightIcon,\n  UserIcon,\n} from '@vue-hero-icons/solid'\nexport default {\n  mixins: [validationMixin],\n\n  components: {\n    HomeIcon,\n    SaveIcon,\n    ChevronRightIcon,\n    UsersIcon,\n    UserIcon,\n  },\n\n  data() {\n    return {\n      previewImage: '',\n      formData: {\n        id: null,\n        image: '',\n        name: '',\n        email: '',\n        mobile: '',\n        coordinates: '',\n        address: '',\n      },\n    }\n  },\n\n  validations: {\n    formData: {\n      name: { required },\n      email: { required, email },\n      mobile: { required },\n    },\n  },\n\n  computed: {\n    ...mapGetters(['getSelectedUser']),\n    nameErrors() {\n      const errors = []\n      if (!this.$v.formData.name.$dirty) return errors\n      !this.$v.formData.name.required && errors.push('Name is required.')\n      return errors\n    },\n    emailErrors() {\n      const errors = []\n      if (!this.$v.formData.email.$dirty) return errors\n      !this.$v.formData.email.email && errors.push('Must be valid e-mail')\n      !this.$v.formData.email.required && errors.push('E-mail is required')\n      return errors\n    },\n    mobileErrors() {\n      const errors = []\n      if (!this.$v.formData.mobile.$dirty) return errors\n      !this.$v.formData.mobile.required && errors.push('Mobile is required')\n      return errors\n    },\n  },\n\n  mounted() {\n    this.initAddress()\n    if (this.$route.params.id) {\n      this.getUserData()\n    }\n  },\n\n  methods: {\n    ...mapActions(['addUser', 'updateUser']),\n\n    getUserData() {\n      axios\n        .get(`http://localhost:3000/users/${this.$route.params.id}`)\n        .then((response) => {\n          if (response) {\n            this.previewImage = response.data.image\n            this.formData.image = response.data.image\n            this.formData.name = response.data.name\n            this.formData.email = response.data.email\n            this.formData.mobile = response.data.mobile\n            this.formData.address = response.data.address\n            this.formData.coordinates = response.data.coordinates\n          }\n        })\n    },\n\n    uploadImage(event) {\n      const input = event.target\n      if (input.files) {\n        let reader = new FileReader()\n        reader.onload = (e) => {\n          this.previewImage = e.target.result\n          this.formData.image = e.target.result\n        }\n        reader.readAsDataURL(input.files[0])\n      }\n    },\n\n    removeImage() {\n      this.previewImage = ''\n      this.formData.image = ''\n    },\n\n    initAddress() {\n      mapboxgl.accessToken =\n        'pk.eyJ1IjoiaGFzaWkiLCJhIjoiY2wwYWt4cjJ1MDF4YTNjbWptNzZwM2ZhZyJ9.9WUVDkgiL5lsqX95u0VAvA'\n\n      const geocoder = new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        types: 'country,region,place,postcode,locality,neighborhood',\n      })\n\n      geocoder.addTo('#geocoder')\n\n      // Get the geocoder results container.\n      const results = document.getElementById('result')\n\n      // Add geocoder result to container.\n      geocoder.on('result', (e) => {\n        results.innerText = JSON.stringify(e.result, null, 2)\n        this.formData.coordinates = e.result.geometry.coordinates\n        this.formData.address = e.result.place_name\n      })\n\n      // Clear results container when search is cleared.\n      geocoder.on('clear', () => {\n        results.innerText = ''\n      })\n    },\n\n    submitUserData() {\n      this.$v.$touch()\n      if (this.$route.params.id) {\n        this.updateUser({\n          id: this.$route.params.id,\n          data: this.formData,\n        }).then(() => {\n          this.$toastr.s('User updated successfully')\n          this.$router.push('/')\n        })\n      } else {\n        this.addUser(this.formData).then(() => {\n          this.$toastr.s('User added successfully')\n          this.$router.push('/')\n        })\n      }\n    },\n  },\n}\n</script>\n\n<style>\n.mapboxgl-ctrl-geocoder.mapboxgl-ctrl {\n  width: 100%;\n  max-width: 900px;\n  border: 1px solid gray;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}